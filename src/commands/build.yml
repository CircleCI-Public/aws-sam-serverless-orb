description: >
  Build your Lambda source.
  The sam build command iterates through the functions in your application, looks for a manifest file (such as requirements.txt) that contains the dependencies, and automatically creates deployment artifacts that you can deploy to Lambda using the sam package and sam deploy commands. You can also use sam build in combination with other commands like sam local invoke to test your application locally.

  Ensure CLI has been installed before utilizing.

parameters:
  validate:
    type: boolean
    default: true
    description: "Validate your template file. This will run unless manually set to false."
  build_dir:
    type: string
    description: The path to a folder where the built artifacts are stored.
    default: ""
  base_dir:
    type: string
    description: Resolves relative paths to the function's source code with respect to this folder. Use this if the AWS SAM template and your source code aren't in the same enclosing folder. By default, relative paths are resolved with respect to the template's location.
    default: ""
  template:
    type: string
    description: The AWS SAM template file
  profile_name:
    type: string
    description: Select a specific profile from your credential file to get AWS credentials.
    default: "default"
  use_container:
    type: boolean
    description: If your functions depend on packages that have natively compiled dependencies, use this flag to build your function inside an AWS Lambda-like Docker container.
    default: true
  region:
    type: string
    description: Sets the AWS Region of the service (for example, us-east-1).
    default: ${AWS_DEFAULT_REGION}
  debug:
    type: boolean
    description: Turns on debug logging.
    default: false
  build_parameter_overrides:
    type: string
    description: >-
      AWS CloudFormation parameter overrides encoded as key=value pairs
      for the sam build command. Use the same format as the AWS CLI.
    default: ""
  build_arguments:
    type: string
    description: Additional arguments to pass to the build command. e.g. (--parallel)
    default: ""

steps:
  - when:
      condition: << parameters.validate >>
      steps:
        - run:
            name: "Validating SAM template"
            command: |
              sam validate -t << parameters.template >> \
              --region << parameters.region >> \
              --profile << parameters.profile_name >> \
              <<# parameters.debug >>--debug<</ parameters.debug >>

  - run:
      name: "Building SAM application"
      environment:
        ORB_STR_TEMPLATE: << parameters.template >>
        ORB_EVAL_BUILD_DIR: << parameters.build_dir >>
        ORB_EVAL_BASE_DIR: << parameters.base_dir >>
        ORB_STR_PROFILE_NAME: << parameters.profile_name >>
        ORB_BOOL_USE_CONTAINER: << parameters.use_container >>
        ORB_STR_REGION: << parameters.region >>
        ORB_BOOL_DEBUG: << parameters.debug >>
        ORB_STR_BUILD_PARAMETER_OVERRIDES: << parameter.build_parameter_overrides >>
        ORB_STR_BUILD_ARGUMENTS: << parameter.build_arguments >>
      command: <<include(scripts/build.sh)>>
